[{"/Users/diego/Desktop/react-ed/src/index.js":"1","/Users/diego/Desktop/react-ed/src/App.js":"2","/Users/diego/Desktop/react-ed/src/reportWebVitals.js":"3"},{"size":535,"mtime":1662551271316,"results":"4","hashOfConfig":"5"},{"size":8248,"mtime":1664818998367,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":1662551139404,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"11"},"13gqdzt",{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"11"},"/Users/diego/Desktop/react-ed/src/index.js",[],[],[],"/Users/diego/Desktop/react-ed/src/App.js",["19","20","21","22","23"],[],"import React, { useState } from \"react\";\nimport './App.css';\n\n\nfunction App() {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const axios = require('axios');\n\n  const [isValidated, setIsValidated] = useState(false);\n  const [loginSuccessful, setLoginSuccessful] = useState(true);\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [isTaking, setIsTaking] = useState(false);\n\n  const [isRedirecting, setIsRedirecting] = useState(false);\n\n  const [isThereGrades, setIsThereGrades] = useState(false);\n  const [realGrades, setRealGrades] = useState({});\n\n\n  const handleUsernameChange = event => {\n    setUsername(event.target.value);\n  }\n\n  const handlePasswordChange = event => {\n    setPassword(event.target.value);\n  }\n\n  const getAverage = ({ codeMatiere, codePeriode }) => {\n    if (codePeriode in realGrades[codeMatiere]) {\n      return realGrades[codeMatiere][codePeriode].moyenne;\n    } else {\n      return -1;\n    }\n  }\n\n  const getData = async() => {\n    setIsLoading(true);\n\n    const loginURL = \"https://api.ecoledirecte.com/v3/login.awp?v=4.17.9\";\n    \n    const loginPayload = {\n      \"uuid\": \"\",\n      \"identifiant\": username,\n      \"motdepasse\": password,\n      \"isReLogin\": false\n    }\n\n    setIsConnecting(true);\n    axios.post(loginURL, \"data=\" + JSON.stringify(loginPayload)).then((loginResponse) => {\n      setIsConnecting(false);\n      const loginResponseCode = loginResponse.data.code;\n      if (loginResponseCode !== 200) {\n        setIsValidated(false);\n        setLoginSuccessful(false);\n        setIsLoading(false);\n        return 0;\n      }\n      setLoginSuccessful(true);\n      \n      const studentToken = loginResponse.data.token;\n      const studentID = loginResponse.data.data.accounts[0].id;\n\n      const gradesURL = \"https://api.ecoledirecte.com/v3/eleves/\" + studentID + \"/notes.awp?verbe=get&v=4.17.9\";\n\n      const gradesPayload = {\n        \"anneeScolaire\": \"\"\n      }\n\n      const gradesHeaders = {\n        \"x-token\": studentToken\n      }\n\n      setIsTaking(true);\n      axios.post(gradesURL, \"data=\" + JSON.stringify(gradesPayload), { headers: gradesHeaders }).then((gradesResponse) => {\n        setIsTaking(false);\n        const gradesResponseCode = gradesResponse.data.code;\n        if (gradesResponseCode !== 200) {\n          setIsLoading(false);\n          return 0;\n        }\n        calculateAverages(gradesResponse.data);\n      });\n    });\n  }\n\n  const calculateAverages = ({ data }) => {\n    if (!(data.notes.length === 0)) { setIsThereGrades(true); }\n    else { setIsThereGrades(false); }\n\n    var grades = {\n      \"GENERALE\": {}\n    };\n    \n    // Addition des notes\n    for (var note of data.notes) {\n      if (!(note.codeMatiere in grades)) {\n        grades[note.codeMatiere] = {};\n      }\n      if (!(note.codePeriode in grades[note.codeMatiere])) {\n        grades[note.codeMatiere][note.codePeriode] = {\n          \"total\": 0.0,\n          \"coef\": 0.0,\n          \"moyenne\": 0.0\n        }\n        grades[note.codeMatiere].completeName = note.libelleMatiere;\n      }\n      var valeur = parseFloat(note.valeur.replace(\",\", \".\"));\n      var valeurSur = parseFloat(note.noteSur.replace(\",\", \".\"));\n\n      if (!isNaN(valeur)) {\n        var valeurNote = (valeur / (valeurSur / 1.0)) * 20.0;\n\n        grades[note.codeMatiere][note.codePeriode].total += valeurNote;\n        grades[note.codeMatiere][note.codePeriode].coef += 1.0;\n      }\n    }\n\n    // Calcul des moyennes par matière\n    for (const [codeMatiere, matiere] of Object.entries(grades)) {\n      if (codeMatiere !== \"GENERALE\") {\n        for (const [codePeriode, periode] of Object.entries(matiere)) {\n          if (codePeriode !== \"completeName\") {\n            var moyenne = grades[codeMatiere][codePeriode].total / grades[codeMatiere][codePeriode].coef;\n            moyenne = Math.round(moyenne * 100) / 100.0;\n            grades[codeMatiere][codePeriode].moyenne = moyenne;\n            \n            if (!(codePeriode in grades.GENERALE)) {\n              grades.GENERALE[codePeriode] = {\n                \"total\": 0.0,\n                \"coef\": 0.0,\n                \"moyenne\": 0.0\n              };\n              grades.GENERALE.completeName = \"MOYENNE GÉNÉRALE\";\n            }\n            \n            grades.GENERALE[codePeriode].total += moyenne;\n            grades.GENERALE[codePeriode].coef += 1.0;\n          }\n        }\n      }\n    }\n\n    // Calcul de la moyenne générale\n    for (const [codePeriode, periode] of Object.entries(grades.GENERALE)) {\n      if (codePeriode !== \"completeName\") {\n        var moyenne = grades.GENERALE[codePeriode].total / grades.GENERALE[codePeriode].coef;\n        moyenne = Math.round(moyenne * 100) / 100.0;\n        grades.GENERALE[codePeriode].moyenne = moyenne;\n      }\n    }\n\n    setRealGrades(grades);\n    setIsLoading(false);\n  }\n\n  const submit = async() => {\n    if (!isLoading) {\n      setIsValidated(true);\n      getData();\n    }\n  }\n  \n  return (\n    <div className=\"App\">\n      {(() => {\n        return (\n            <div>\n              <div className=\"box\">\n                <h1>Moyennes École Directe <a className=\"version\">v2</a></h1>\n                <p>Entrez votre identifiant et mot de passe ED</p>\n                <a>{loginSuccessful ? \"\" : \"Identifiant ou mot de passe incorrect\"}</a>\n                <input onChange={handleUsernameChange} type=\"text\" placeholder=\"Identifiant\"></input>\n                <input onChange={handlePasswordChange} type=\"password\" placeholder=\"Mot de passe\"></input>\n                <button onClick={submit}>{isConnecting ? \"Connexion...\" : isTaking ? \"Récupération des notes...\" : \"Valider\"}</button>\n              </div>\n\n              {(() => {\n                // Affichage des Moyennes\n                if (isValidated && loginSuccessful && !isLoading) {\n                  if (isThereGrades) {\n                    var moyennes = [];\n\n                    for (const [codeMatiere, matiere] of Object.entries(realGrades)) {\n                      moyennes.push(\n                        <div className=\"box\">\n                          <h1>{matiere.completeName}</h1>\n                          {(() => {\n                            const average = getAverage({codeMatiere: codeMatiere, codePeriode: \"A001\"});\n\n                            if (average !== -1) {\n                              return <span><h3>{\"Trimestre 1\"}</h3><h3>--</h3><h3 className=\"note\">{average}</h3></span>;\n                            }\n                          })()}\n                          {(() => {\n                            const average = getAverage({codeMatiere: codeMatiere, codePeriode: \"A002\"});\n\n                            if (average !== -1) {\n                              return <span><h3>{\"Trimestre 2\"}</h3><h3>--</h3><h3 className=\"note\">{average}</h3></span>;\n                            }\n                          })()}\n                          {(() => {\n                            const average = getAverage({codeMatiere: codeMatiere, codePeriode: \"A003\"});\n\n                            if (average !== -1) {\n                              return <span><h3>{\"Trimestre 3\"}</h3><h3>--</h3><h3 className=\"note\">{average}</h3></span>;\n                            }\n                          })()}\n                        </div>\n                      );\n                    }\n                    return moyennes;\n\n                  } else {\n                    return (\n                      <div className=\"box\">\n                        <h2>Pas de notes pour l'instant...</h2>\n                      </div>\n                    )\n                  }\n                }\n              })()}\n\n              <form action=\"https://www.ecoledirecte.com\" className=\"box\">\n                <h1>École Directe</h1>\n                <p>Ce cite calcule les moyennes de chaque matière ainsi que la moyenne générale, cette fonction n'est plus disponible sur le site officiel.</p>\n                <button type=\"submit\" onClick={() => setIsRedirecting(true)}>{isRedirecting ? \"Redirection...\" : \"Site officiel ED\"}</button>\n                <p>DF</p>\n              </form>\n            </div>\n          )\n      })()}\n    </div>\n    \n  );\n}\n\nexport default App;\n","/Users/diego/Desktop/react-ed/src/reportWebVitals.js",[],[],{"ruleId":"24","severity":1,"message":"25","line":125,"column":34,"nodeType":"26","messageId":"27","endLine":125,"endColumn":41},{"ruleId":"24","severity":1,"message":"25","line":148,"column":30,"nodeType":"26","messageId":"27","endLine":148,"endColumn":37},{"ruleId":"28","severity":1,"message":"29","line":150,"column":13,"nodeType":"26","messageId":"30","endLine":150,"endColumn":20},{"ruleId":"31","severity":1,"message":"32","line":173,"column":44,"nodeType":"33","endLine":173,"endColumn":67},{"ruleId":"31","severity":1,"message":"32","line":175,"column":17,"nodeType":"33","endLine":175,"endColumn":20},"no-unused-vars","'periode' is assigned a value but never used.","Identifier","unusedVar","no-redeclare","'moyenne' is already defined.","redeclared","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement"]